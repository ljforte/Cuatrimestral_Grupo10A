CREATE DATABASE EcommerceWeb;
GO

USE EcommerceWeb;
GO

CREATE TABLE Usuarios (
    UsuarioID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(50) NOT NULL,
    Email NVARCHAR(100) NOT NULL UNIQUE,
    UsuarioPassword NVARCHAR(255) NOT NULL,
    Rol INT NOT NULL,
    FechaRegistro DATETIME NOT NULL DEFAULT GETDATE(),
    Estado BIT NOT NULL DEFAULT 1
);
GO

INSERT INTO Usuarios (Nombre, Email, Usuariopassword, Rol) VALUES 
('Admin','admin@admin.com','admin',2),
('Cliente','cliente@cliente.com','cliente',1);
GO

CREATE TABLE EstadoPedido ( EstadoID INT PRIMARY KEY IDENTITY(1,1), Descripcion NVARCHAR(50) NOT NULL ); 

GO

INSERT INTO EstadoPedido (Descripcion) VALUES ('Pendiente'), ('Enviado'), ('Entregado');

GO

CREATE TABLE Roles  (
ID INT PRIMARY KEY IDENTITY(1,1),
Rol NVARCHAR(30) NOT NULL
);

GO

CREATE TABLE Marcas(
	MarcaID INT PRIMARY KEY IDENTITY(1,1),
	Nombre VARCHAR(100) NOT NULL
);

GO
CREATE TABLE Categorias (
    CategoriaID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(50) NOT NULL,
    Descripcion NVARCHAR(255)
);
GO

CREATE TABLE Productos (
    ProductoID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(100) NOT NULL,
    MarcaID INT NOT NULL,
    Precio DECIMAL(10, 2) NOT NULL,
    Stock INT NOT NULL,
    Descripcion NVARCHAR(255),
    CategoriaID INT FOREIGN KEY REFERENCES Categorias(CategoriaID),
    Estado BIT NOT NULL DEFAULT 1
);
GO


CREATE TABLE ImagenProducto (
    ImagenID INT PRIMARY KEY IDENTITY(1,1),
    ProductoID INT NOT NULL,
    ImagenURL NVARCHAR(255),
    FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID) ON DELETE CASCADE
);
GO

CREATE TABLE Carrito (
    CarritoID INT PRIMARY KEY IDENTITY(1,1),
    UsuarioID INT FOREIGN KEY REFERENCES Usuarios(UsuarioID),
    FechaCreacion DATETIME NOT NULL DEFAULT GETDATE()
);
GO

CREATE TABLE CarritoDetalle (
    CarritoDetalleID INT PRIMARY KEY IDENTITY(1,1),
    CarritoID INT FOREIGN KEY REFERENCES Carrito(CarritoID) ON DELETE CASCADE,
    ProductoID INT FOREIGN KEY REFERENCES Productos(ProductoID),
    Cantidad INT NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL
);
GO


CREATE TABLE Pedidos (
    PedidoID INT PRIMARY KEY IDENTITY(1,1),
    UsuarioID INT FOREIGN KEY REFERENCES Usuarios(UsuarioID),
    FechaPedido DATETIME NOT NULL DEFAULT GETDATE(),
    EstadoPedido NVARCHAR(20) NOT NULL,
    Total DECIMAL(10, 2) NOT NULL
);
GO

CREATE TABLE PedidosDetalle (
    PedidoDetalleID INT PRIMARY KEY IDENTITY(1,1),
    PedidoID INT FOREIGN KEY REFERENCES Pedidos(PedidoID) ON DELETE CASCADE,
    ProductoID INT FOREIGN KEY REFERENCES Productos(ProductoID),
    Cantidad INT NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL
);
GO

CREATE TABLE Direcciones (
    DireccionID INT PRIMARY KEY IDENTITY(1,1),
    UsuarioID INT FOREIGN KEY REFERENCES Usuarios(UsuarioID),
    Calle NVARCHAR(100) NOT NULL,
    Ciudad NVARCHAR(50) NOT NULL,
    CodigoPostal NVARCHAR(10) NOT NULL,
    Pais NVARCHAR(50) NOT NULL,
    Telefono NVARCHAR(20) NOT NULL
);
GO



INSERT INTO Categorias (Nombre, Descripcion) VALUES
('Gabinetes', 'Estructuras que alojan componentes de PC'),
('Placas Base', 'Tarjetas principales que conectan todos los componentes de hardware'),
('Tarjetas Gráficas', 'Unidades de procesamiento gráfico dedicadas'),
('Memoria RAM', 'Módulos de memoria de acceso aleatorio para el almacenamiento temporal'),
('Discos Duros', 'Dispositivos de almacenamiento de datos'),
('Unidades SSD', 'Dispositivos de almacenamiento sólido para mayor velocidad'),
('Fuentes de Alimentación', 'Componentes que suministran energía a la PC'),
('Procesadores', 'Unidades centrales de procesamiento que ejecutan instrucciones'),
('Refrigeración', 'Sistemas de enfriamiento para componentes internos'),
('Periféricos', 'Dispositivos externos como teclados, ratones y monitores');
GO

INSERT INTO Marcas (Nombre) VALUES
('Intel'),
('AMD'),
('NVIDIA'),
('Asus'),
('Gigabyte'),
('Corsair'),
('Kingston'),
('Western Digital'),
('Seagate'),
('MSI');
GO

INSERT INTO Roles (Rol) VALUES
('Cliente'),
('Admin');
GO

INSERT INTO Productos (Nombre, MarcaID, Precio, Stock, Descripcion, CategoriaID, Estado) VALUES
('Intel Core i9 11900K', 1, 529.99, 50, 'Procesador de 8 núcleos y 16 hilos', 8, 1),
('AMD Ryzen 9 5900X', 2, 549.99, 40, 'Procesador de 12 núcleos y 24 hilos', 8, 1),
('NVIDIA GeForce RTX 3080', 3, 699.99, 30, 'Tarjeta gráfica de alto rendimiento', 3, 1),
('Asus TUF Gaming X570', 4, 219.99, 25, 'Placa base para AMD Ryzen', 2, 1),
('Gigabyte Aorus B550', 5, 179.99, 20, 'Placa base compatible con AMD Ryzen', 2, 1),
('Corsair Vengeance LPX 16GB', 6, 89.99, 100, 'Memoria RAM DDR4 de alto rendimiento', 4, 1),
('Kingston Fury 32GB', 7, 129.99, 70, 'Memoria RAM DDR4 de 32GB', 4, 1),
('Western Digital Blue 1TB', 8, 49.99, 150, 'Disco duro de 1TB', 5, 1),
('Seagate Barracuda 2TB', 9, 69.99, 120, 'Disco duro de 2TB', 5, 1),
('MSI MPG Gungnir 110R', 10, 139.99, 60, 'Gabinete de torre media con vidrio templado', 1, 1),
('Corsair iCUE 5000X', 6, 199.99, 45, 'Gabinete de torre completa con iluminación RGB', 1, 1),
('Kingston A2000 1TB', 7, 89.99, 80, 'Unidad SSD NVMe de 1TB', 6, 1),
('Western Digital SN850 2TB', 8, 299.99, 35, 'Unidad SSD NVMe de 2TB de alta velocidad', 6, 1),
('Cooler Master Hyper 212', 6, 39.99, 90, 'Refrigerador de aire para CPU', 9, 1),
('Noctua NH-D15', 6, 89.99, 55, 'Refrigerador de aire para CPU de doble torre', 9, 1),
('EVGA 750W GQ', 6, 109.99, 75, 'Fuente de alimentación de 750W con certificación 80+ Gold', 7, 1),
('Seasonic Prime 850W', 9, 179.99, 40, 'Fuente de alimentación de 850W con certificación 80+ Platinum', 7, 1),
('AMD Radeon RX 6800 XT', 2, 649.99, 30, 'Tarjeta gráfica de alto rendimiento para juegos', 3, 1),
('Asus ROG Strix 3090', 4, 1499.99, 10, 'Tarjeta gráfica premium para gaming y trabajo profesional', 3, 1),
('Intel Xeon W-3275', 1, 3499.99, 5, 'Procesador de servidor de 28 núcleos', 8, 1);
GO


INSERT INTO ImagenProducto (ProductoID, ImagenURL) VALUES
(1, 'https://http2.mlstatic.com/D_NQ_NP_677183-MLA54812400475_042023-O.webp'),
(1, 'https://http2.mlstatic.com/D_NQ_NP_2X_743787-MLA47219952113_082021-F.webp'),
(2, 'https://http2.mlstatic.com/D_NQ_NP_819467-MLA44771577629_022021-O.webp'),
(3, 'https://http2.mlstatic.com/D_NQ_NP_780915-MLA49001561785_022022-O.webp'),
(4, 'https://http2.mlstatic.com/D_NQ_NP_818437-MLA51636738692_092022-O.webp'),
(5, 'https://http2.mlstatic.com/D_NQ_NP_668419-MLU69934902867_062023-O.webp'),
(5, 'https://http2.mlstatic.com/D_NQ_NP_708617-MLU73693564903_122023-O.webp'),
(5, 'https://http2.mlstatic.com/D_NQ_NP_621060-MLU69936474763_062023-O.webp'),
(6, 'https://http2.mlstatic.com/D_NQ_NP_826363-MLA74781247079_022024-O.webp'),
(7, 'https://http2.mlstatic.com/D_NQ_NP_853562-MLA74781346721_022024-O.webp'),
(8, 'https://http2.mlstatic.com/D_NQ_NP_632778-MLA53352128101_012023-O.webp'),
(8, 'https://http2.mlstatic.com/D_NQ_NP_768198-MLU70028224279_062023-O.webp'),
(8, 'https://http2.mlstatic.com/D_NQ_NP_994277-MLU74088828554_012024-O.webp'),
(9, 'https://http2.mlstatic.com/D_NQ_NP_763799-MLU79148198301_092024-O.webp'),
(10, 'https://http2.mlstatic.com/D_NQ_NP_671913-MLU54972904368_042023-O.webp'),
(11, 'https://http2.mlstatic.com/D_NQ_NP_944508-MLA79787872189_102024-O.webp'),
(12, 'https://http2.mlstatic.com/D_NQ_NP_965676-MLA78864293749_092024-O.webp'),
(13, 'https://http2.mlstatic.com/D_NQ_NP_640484-MLU75938038240_042024-O.webp'),
(14, 'https://http2.mlstatic.com/D_NQ_NP_626435-MLU74480112355_022024-O.webp'),
(15, 'https://http2.mlstatic.com/D_NQ_NP_958193-MLU79181079465_092024-O.webp'),
(15, 'https://http2.mlstatic.com/D_NQ_NP_885573-MLU74366655692_022024-O.webp'),
(16, 'https://http2.mlstatic.com/D_NQ_NP_979192-MLU72831156405_112023-O.webp'),
(17, 'https://http2.mlstatic.com/D_NQ_NP_975984-MLU78370843059_082024-O.webp'),
(18, 'https://http2.mlstatic.com/D_NQ_NP_706937-MLU72824211407_112023-O.webp'),
(19, 'https://http2.mlstatic.com/D_NQ_NP_955131-MLA72483301492_102023-O.webp'),
(20, 'https://http2.mlstatic.com/D_NQ_NP_966214-MLA49500030797_032022-O.webp');

GO


CREATE PROCEDURE storedListarProductos as
SELECT P.ProductoID as ProductoID, P.Nombre, M.Nombre AS Marca, P.Precio, P.Descripcion, 
                                   C.Nombre AS Categoria, P.MarcaID, C.CategoriaID
                            FROM Productos AS P
                            LEFT JOIN Marcas AS M ON M.MarcaID = P.MarcaID
                            LEFT JOIN Categorias AS C ON C.CategoriaID = P.CategoriaID

GO

CREATE PROCEDURE storedModificarProducto 
@Nombre VARCHAR,
@MarcaID int,
@Precio decimal,
@Stock int,
@Descripcion varchar(255),
@CategoriaID int,
@Estado BIT,
@ProductoID int
as
UPDATE  Productos SET Nombre = @Nombre, MarcaID = @MarcaID, Precio = @Precio, Stock = @Stock, Descripcion = @Descripcion, CategoriaID = @CategoriaID, 
Estado = @Estado 
WHERE ProductoID = @ProductoID;


GO
-- este trigger es para que si agregas nuevamente un producto que ya esta en detalle carrito, lo sume
-- y no genere un detalle carrito nuevo, es decir si generaste un detallecarrito para ese cliente con ProducotI=1
-- y le volves a dar "agregar" en producto, n ogeneras un nuevo detallecarrito si no que modificas el que esta generado

CREATE TRIGGER trg_InsertarCarritoDetalle
ON CarritoDetalle
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @ProductoID INT, @CarritoID INT, @Cantidad INT, @PrecioUnitario DECIMAL(10,2);
    
    SELECT @ProductoID = ProductoID, @CarritoID = CarritoID, @Cantidad = Cantidad, @PrecioUnitario = PrecioUnitario
    FROM inserted;
    
    -- Comprobar si ya existe un carrito detalle con ese productoid
    IF EXISTS (
        SELECT 1
        FROM CarritoDetalle
        WHERE ProductoID = @ProductoID AND CarritoID = @CarritoID
    )
    BEGIN
        -- Si  existe, sumar 1 a la cantidad
        UPDATE CarritoDetalle
        SET Cantidad = Cantidad + @Cantidad
        WHERE ProductoID = @ProductoID AND CarritoID = @CarritoID;
    END
    ELSE
    BEGIN
        -- si no existe deja seguir el insert
        INSERT INTO CarritoDetalle (CarritoID, ProductoID, Cantidad, PrecioUnitario)
        VALUES (@CarritoID, @ProductoID, @Cantidad, @PrecioUnitario);
    END
END;
GO


--SP PARA ELIMINAR DETALLECARRITO


CREATE PROCEDURE spEliminarCarritoDetalle
    @CarritoDetalleID INT
AS
BEGIN
    DELETE FROM CarritoDetalle
    WHERE CarritoDetalleID = @CarritoDetalleID
END;

SELECT CarritoID as CarritoID, UsuarioID as Usuario, FechaCreacion as Fecha FROM Carrito

SELECT * from Usuarios







// Este trigger elimina un CARRITO si no hay mas CARRITODETALLE relacionados a el. Deja en null el carrito en caso
de eliminar el ultimo detalle


CREATE TRIGGER trg_EliminarCarritoVacio
ON CarritoDetalle
AFTER DELETE
AS
BEGIN
    -- Para ver carritos que ya no tienen registros de CarritoDetalle
    DELETE FROM Carrito
    WHERE CarritoID IN (
        SELECT DISTINCT CarritoID
        FROM DELETED -- Registros que fueron eliminados
        WHERE NOT EXISTS (
            SELECT 1
            FROM CarritoDetalle
            WHERE CarritoDetalle.CarritoID = DELETED.CarritoID
        )
    );
END;
GO


-- ACTUALIZACIONES PARA TABLA DETALLE PEDIDO Y SUS VARIANTES DE PAGO
CREATE TABLE MedioDePago (
    MedioDePagoID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(50) NOT NULL
);
GO

INSERT INTO MedioDePago (Nombre)
VALUES ('Efectivo'), ('Tarjeta');
GO


ALTER TABLE Pedidos
ADD MedioDePagoID INT FOREIGN KEY REFERENCES MedioDePago(MedioDePagoID);
GO



CREATE TABLE DetallePagoTarjeta (
    NumeroTarjeta INT NOT NULL,
    CodigoSeguridad INT NOT NULL,
    NombreTarjeta NVARCHAR(100) NOT NULL,
    FechaVencimiento DATE NOT NULL,
    PRIMARY KEY (NumeroTarjeta)
);
GO


-- TRIGER CREADO PARA VALIDAR FECHA DE VENCIMIENTO EN TARJETA, SI EL INGRESO EN LA TABLA ES MENOR A LA FECHA ACTUAL
-- HACE UN ROLLBACK Y NO VALIDA LA TRAANSACCION

CREATE TRIGGER trg_ValidarFechaVencimiento
ON DetallePagoTarjeta
AFTER INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM Inserted
        WHERE FechaVencimiento < DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()), 1)
    )
    BEGIN
        RAISERROR ('La fecha de vencimiento no puede ser anterior al mes y año actuales.', 16, 1);
        ROLLBACK TRANSACTION;
    END
END;
GO
